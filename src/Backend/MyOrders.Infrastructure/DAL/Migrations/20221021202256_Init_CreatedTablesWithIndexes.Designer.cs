// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyOrders.Infrastructure.DAL;

#nullable disable

namespace MyOrders.Infrastructure.DAL.Migrations
{
    [DbContext(typeof(MyOrdersDbContext))]
    [Migration("20221021202256_Init_CreatedTablesWithIndexes")]
    partial class Init_CreatedTablesWithIndexes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MyOrders.Core.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ZipCode");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("MyOrders.Core.Entities.ContactData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PhoneNumber");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("PhoneNumber");

                    b.ToTable("ContactDatas");
                });

            modelBuilder.Entity("MyOrders.Core.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactDataId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("ContactDataId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("MyOrders.Core.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(14, 4)
                        .HasColumnType("decimal(14,4)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderNumber")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MyOrders.Core.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("MyOrders.Core.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Price")
                        .HasPrecision(14, 4)
                        .HasColumnType("decimal(14,4)");

                    b.Property<int?>("ProductKindId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ProductKindId");

                    b.HasIndex("ProductName")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MyOrders.Core.Entities.ProductKind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProductKindName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("ProductKindName")
                        .IsUnique();

                    b.ToTable("ProductKinds");
                });

            modelBuilder.Entity("MyOrders.Core.Entities.Address", b =>
                {
                    b.OwnsOne("MyOrders.Core.ValueObjects.AddressLocation", "AddressLocation", b1 =>
                        {
                            b1.Property<int>("AddressId")
                                .HasColumnType("int");

                            b1.Property<int>("BuildingNumber")
                                .HasColumnType("int")
                                .HasColumnName("BuildingNumber");

                            b1.Property<string>("CityName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("varchar(200)")
                                .HasColumnName("CityName");

                            b1.Property<string>("CountryName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("varchar(200)")
                                .HasColumnName("CountryName");

                            b1.Property<int?>("FlatNumber")
                                .HasColumnType("int")
                                .HasColumnName("FlatNumber");

                            b1.Property<string>("StreetName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("varchar(200)")
                                .HasColumnName("StreetName");

                            b1.HasKey("AddressId");

                            b1.ToTable("Addresses");

                            b1.WithOwner()
                                .HasForeignKey("AddressId");
                        });

                    b.Navigation("AddressLocation");
                });

            modelBuilder.Entity("MyOrders.Core.Entities.Customer", b =>
                {
                    b.HasOne("MyOrders.Core.Entities.Address", "Address")
                        .WithOne("Customer")
                        .HasForeignKey("MyOrders.Core.Entities.Customer", "AddressId");

                    b.HasOne("MyOrders.Core.Entities.ContactData", "ContactData")
                        .WithOne("Customer")
                        .HasForeignKey("MyOrders.Core.Entities.Customer", "ContactDataId");

                    b.OwnsOne("MyOrders.Core.ValueObjects.Person", "Person", b1 =>
                        {
                            b1.Property<int>("CustomerId")
                                .HasColumnType("int");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("varchar(200)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("varchar(200)")
                                .HasColumnName("LastName");

                            b1.HasKey("CustomerId");

                            b1.HasIndex("FirstName", "LastName");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.Navigation("Address");

                    b.Navigation("ContactData");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MyOrders.Core.Entities.Order", b =>
                {
                    b.HasOne("MyOrders.Core.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MyOrders.Core.Entities.OrderItem", b =>
                {
                    b.HasOne("MyOrders.Core.Entities.Customer", "Customer")
                        .WithMany("OrderItems")
                        .HasForeignKey("CustomerId");

                    b.HasOne("MyOrders.Core.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");

                    b.HasOne("MyOrders.Core.Entities.Product", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId");

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MyOrders.Core.Entities.Product", b =>
                {
                    b.HasOne("MyOrders.Core.Entities.ProductKind", "ProductKind")
                        .WithMany("Products")
                        .HasForeignKey("ProductKindId");

                    b.Navigation("ProductKind");
                });

            modelBuilder.Entity("MyOrders.Core.Entities.Address", b =>
                {
                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MyOrders.Core.Entities.ContactData", b =>
                {
                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MyOrders.Core.Entities.Customer", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MyOrders.Core.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("MyOrders.Core.Entities.Product", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("MyOrders.Core.Entities.ProductKind", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
